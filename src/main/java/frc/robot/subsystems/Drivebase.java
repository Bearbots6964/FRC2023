// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/** */
public class Drivebase extends SubsystemBase {
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  public CANSparkMax lFront;
  public CANSparkMax lRear;
  private MotorControllerGroup left;
  private CANSparkMax rFront;
  private CANSparkMax rRear;
  private MotorControllerGroup right;
  private DifferentialDrive drive;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /** */
  public Drivebase() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    lFront = new CANSparkMax(4, MotorType.kBrushless);

    lFront.restoreFactoryDefaults();
    lFront.setInverted(false);
    lFront.setIdleMode(IdleMode.kCoast);
    lFront.burnFlash();

    lRear = new CANSparkMax(14, MotorType.kBrushless);

    lRear.restoreFactoryDefaults();
    lRear.setInverted(false);
    lRear.setIdleMode(IdleMode.kCoast);
    lRear.burnFlash();

    left = new MotorControllerGroup(lFront, lRear);
    addChild("Left", left);

    rFront = new CANSparkMax(3, MotorType.kBrushless);

    rFront.restoreFactoryDefaults();
    rFront.setInverted(false);
    rFront.setIdleMode(IdleMode.kCoast);
    rFront.burnFlash();

    rRear = new CANSparkMax(13, MotorType.kBrushless);

    rRear.restoreFactoryDefaults();
    rRear.setInverted(false);
    rRear.setIdleMode(IdleMode.kCoast);
    rRear.burnFlash();

    right = new MotorControllerGroup(rFront, rRear);
    addChild("Right", right);

    drive = new DifferentialDrive(left, right);
    addChild("Drive", drive);
    drive.setSafetyEnabled(true);
    drive.setExpiration(0.1);
    drive.setMaxOutput(1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
  }

  @Override
  public void periodic() {
    // This method will be called once per scheduler run

  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

  }

  // Put methods for controlling this subsystem
  // here. Call these from Commands.
  public void arcadeDrive(double speed, double rotation) {
    drive.arcadeDrive(speed, rotation);
  }
}
